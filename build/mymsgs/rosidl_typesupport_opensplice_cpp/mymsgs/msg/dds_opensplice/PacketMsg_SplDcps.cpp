#include "PacketMsg_SplDcps.h"
#include "ccpp_PacketMsg_.h"

#include <v_copyIn.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>
#include <os_report.h>

v_copyin_result
__mymsgs_msg_dds__PacketMsg___copyIn(
    c_base base,
    const struct ::mymsgs::msg::dds_::PacketMsg_ *from,
    struct _mymsgs_msg_dds__PacketMsg_ *to)
{
    v_copyin_result result = V_COPYIN_RESULT_OK;
    (void) base;

    {
/* Code generated by /var/lib/jenkins/workspace/opensplice-debbuilder/build/opensplice-6.9.190705-osrf1/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 838 */

        c_type type0 = NULL;
        c_type subtype0;
        c_ulong length0;
        c_octet *dest0;
        const ::mymsgs::msg::dds_::PacketMsg_::_buf__seq *src = &from->buf_;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_octet"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_octet>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_ulong)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_octet *)c_newSequence_s(c_collectionType(type0),length0);
         if(dest0 != NULL) {
            /* Code generated by /var/lib/jenkins/workspace/opensplice-debbuilder/build/opensplice-6.9.190705-osrf1/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2041 */
            const c_octet *buf0;
            buf0 = (const c_octet *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->buf_ = (c_sequence)dest0;
         } else {
             result = V_COPYIN_RESULT_OUT_OF_MEMORY;
          }
#else
        dest0 = (c_octet *)c_newSequence_s(c_collectionType(type0),length0);
        if(dest0 != NULL) {
            /* Code generated by /var/lib/jenkins/workspace/opensplice-debbuilder/build/opensplice-6.9.190705-osrf1/src/tools/idlpp/code/idl_genCorbaCxxCopyin.c at line 2041 */
            const c_octet *buf0;
            buf0 = (const c_octet *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
            to->buf_ = (c_sequence)dest0;
        } else {
            result = V_COPYIN_RESULT_OUT_OF_MEMORY;
        }
#endif
        c_free(type0);
    }
    return result;
}

void
__mymsgs_msg_dds__PacketMsg___copyOut(
    const void *_from,
    void *_to)
{
    const struct _mymsgs_msg_dds__PacketMsg_ *from = (const struct _mymsgs_msg_dds__PacketMsg_ *)_from;
    struct ::mymsgs::msg::dds_::PacketMsg_ *to = (struct ::mymsgs::msg::dds_::PacketMsg_ *)_to;
    {
        long size0;
        const c_octet *src0 = (const c_octet *)from->buf_;
        ::mymsgs::msg::dds_::PacketMsg_::_buf__seq *dst = &to->buf_;

        size0 = c_arraySize(c_sequence(from->buf_));
        to->buf_.length(size0);
        {
            c_octet *buf0;
            buf0 = (c_octet *)(*dst).get_buffer();
            memcpy ((void *)buf0,src0,size0* sizeof(*buf0));
        }
    }
}

